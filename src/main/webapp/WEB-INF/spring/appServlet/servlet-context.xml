<?xml version="1.0" encoding="UTF-8"?>
<!--  
XML설정파일을 구성할때 대표 네임스페이스를 지정할 수 있다. 
해당 파일의 경우 beans가 대표 네임스페이스로 지정되어 있다. 
이 경우 <beans> 엘리먼트 추가시 접두어를 생략할 수 있다. 

xmlns="http://www.springframework.org/schema/beans" 
	=> 대표 네임스페이스로 지정했으므로 <beans>와 같이 접두어를 생략할 수 있다. 

xmlns:mvc="http://www.springframework.org/schema/mvc"
	=> mvc네임스페이스의 경우 엘리먼트 추가시 <mvc:xxxx>와 같이 접두어를 추가해야한다.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">


	<mvc:annotation-driven/>

	<!-- 정적파일 경로 세팅 -->
	<!--  
	View(뷰)에서 이미지나 JS, CSS와 같은 정적리소스를 사용하는 경우 Spring이 제공하는
	디렉토리로 아래와 같이 매핑할수 있다. 
	즉, webapp하위의 resources디렉토리를 2개의 별칭으로 매핑하여 사용할 수 있다. 
	-->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	<mvc:resources location="/resources/" mapping="/static/**"></mvc:resources>
	<!-- 아래와 같이 매핑하면 경로명 하나를 줄일 수 있다. -->
	<!-- <mvc:resources location="/resources/" mapping="/**"></mvc:resources> -->

	<!-- ViewResolver를 통한 JSP 경로 세팅 -->
	<!-- 컨트롤러에서 JSP파일의 파일명을 반환하면 뷰리졸버가 받아 최종경로를 완성한다. 
		prefix + JSP파일명 + suffix => /WEB-INF/views/home.jsp
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<!-- 애플리케이션 시작시 자동으로 스캔할 기본패키지 지정 -->
	<!-- SpringMVC로 요청이 들어오면 제일 먼저 DispatcherServlet이 그 요청을 받는다. 
	그리고 아래 설정된 기본패키지를 Scan(스캔)한 후 @Controller 어노테이션이 설정된
	클래스의 요청명이 매핑된 메서드를 찾아 요청을 전달한다.
	즉, 요청을 전달할 컨트롤러 클래스를 찾는 역할을 한다.  -->
	<context:component-scan base-package="com.kosmo.spring" />	
	<context:component-scan base-package="autoscan" />	



	<!-- spring-web-xxx.jar에 포함된 패키지 -->
	<!-- 파일업로드를 위한 빈 생성 -->
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드 할 파일의 최대용량 : 1Mb -->
		<property name="maxUploadSize" value="1000000" />
	</bean>
	
	<!-- 파일 다운로드를 위한 빈 생성 -->
	<!-- 우리가 직접 생성한 클래스 -->
	<bean id="fileDownloadView" class="common.FileDownLoadView" />
	
	<!-- spring-webmvc-xxx.jar에 포함된 패키지 -->
	<bean id="fileViewResolver" 
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />		
	</bean>
	

</beans>
